<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html><head>




  
  <meta content="text/html; charset=windows-1252" http-equiv="content-type"><title>SI03-graphics pipeline</title>
  

  
  
  <script type="text/javascript" src="SI03-graphics%20pipeline_fichiers/MathJax.js"> 
  </script><style type="text/css">.MathJax_Hover_Frame {border-radius: .25em; -webkit-border-radius: .25em; -moz-border-radius: .25em; -khtml-border-radius: .25em; box-shadow: 0px 0px 15px #83A; -webkit-box-shadow: 0px 0px 15px #83A; -moz-box-shadow: 0px 0px 15px #83A; -khtml-box-shadow: 0px 0px 15px #83A; border: 1px solid #A6D ! important; display: inline-block; position: absolute}
.MathJax_Menu_Button .MathJax_Hover_Arrow {position: absolute; cursor: pointer; display: inline-block; border: 2px solid #AAA; border-radius: 4px; -webkit-border-radius: 4px; -moz-border-radius: 4px; -khtml-border-radius: 4px; font-family: 'Courier New',Courier; font-size: 9px; color: #F0F0F0}
.MathJax_Menu_Button .MathJax_Hover_Arrow span {display: block; background-color: #AAA; border: 1px solid; border-radius: 3px; line-height: 0; padding: 4px}
.MathJax_Hover_Arrow:hover {color: white!important; border: 2px solid #CCC!important}
.MathJax_Hover_Arrow:hover span {background-color: #CCC!important}
</style><style type="text/css">#MathJax_About {position: fixed; left: 50%; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; background-color: #DDDDDD; color: black; cursor: default; font-family: message-box; font-size: 120%; font-style: normal; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 15px; -webkit-border-radius: 15px; -moz-border-radius: 15px; -khtml-border-radius: 15px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_About.MathJax_MousePost {outline: none}
.MathJax_Menu {position: absolute; background-color: white; color: black; width: auto; padding: 2px; border: 1px solid #CCCCCC; margin: 0; cursor: default; font: menu; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
.MathJax_MenuItem {padding: 2px 2em; background: transparent}
.MathJax_MenuArrow {position: absolute; right: .5em; padding-top: .25em; color: #666666; font-size: .75em}
.MathJax_MenuActive .MathJax_MenuArrow {color: white}
.MathJax_MenuArrow.RTL {left: .5em; right: auto}
.MathJax_MenuCheck {position: absolute; left: .7em}
.MathJax_MenuCheck.RTL {right: .7em; left: auto}
.MathJax_MenuRadioCheck {position: absolute; left: 1em}
.MathJax_MenuRadioCheck.RTL {right: 1em; left: auto}
.MathJax_MenuLabel {padding: 2px 2em 4px 1.33em; font-style: italic}
.MathJax_MenuRule {border-top: 1px solid #CCCCCC; margin: 4px 1px 0px}
.MathJax_MenuDisabled {color: GrayText}
.MathJax_MenuActive {background-color: Highlight; color: HighlightText}
.MathJax_MenuDisabled:focus, .MathJax_MenuLabel:focus {background-color: #E8E8E8}
.MathJax_ContextMenu:focus {outline: none}
.MathJax_ContextMenu .MathJax_MenuItem:focus {outline: none}
#MathJax_AboutClose {top: .2em; right: .2em}
.MathJax_Menu .MathJax_MenuClose {top: -10px; left: -10px}
.MathJax_MenuClose {position: absolute; cursor: pointer; display: inline-block; border: 2px solid #AAA; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-radius: 18px; -khtml-border-radius: 18px; font-family: 'Courier New',Courier; font-size: 24px; color: #F0F0F0}
.MathJax_MenuClose span {display: block; background-color: #AAA; border: 1.5px solid; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-radius: 18px; -khtml-border-radius: 18px; line-height: 0; padding: 8px 0 6px}
.MathJax_MenuClose:hover {color: white!important; border: 2px solid #CCC!important}
.MathJax_MenuClose:hover span {background-color: #CCC!important}
.MathJax_MenuClose:hover:focus {outline: none}
</style><style type="text/css">.MathJax_Preview .MJXf-math {color: inherit!important}
</style><style type="text/css">.MJX_Assistive_MathML {position: absolute!important; top: 0; left: 0; clip: rect(1px, 1px, 1px, 1px); padding: 1px 0 0 0!important; border: 0!important; height: 1px!important; width: 1px!important; overflow: hidden!important; display: block!important}
.MJX_Assistive_MathML.MJX_Assistive_MathML_Block {width: 100%!important}
</style><style type="text/css">#MathJax_Zoom {position: absolute; background-color: #F0F0F0; overflow: auto; display: block; z-index: 301; padding: .5em; border: 1px solid black; margin: 0; font-weight: normal; font-style: normal; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; -webkit-box-sizing: content-box; -moz-box-sizing: content-box; box-sizing: content-box; box-shadow: 5px 5px 15px #AAAAAA; -webkit-box-shadow: 5px 5px 15px #AAAAAA; -moz-box-shadow: 5px 5px 15px #AAAAAA; -khtml-box-shadow: 5px 5px 15px #AAAAAA; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_ZoomOverlay {position: absolute; left: 0; top: 0; z-index: 300; display: inline-block; width: 100%; height: 100%; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
#MathJax_ZoomFrame {position: relative; display: inline-block; height: 0; width: 0}
#MathJax_ZoomEventTrap {position: absolute; left: 0; top: 0; z-index: 302; display: inline-block; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
</style><style type="text/css">.MathJax_Preview {color: #888}
#MathJax_Message {position: fixed; left: 1px; bottom: 2px; background-color: #E6E6E6; border: 1px solid #959595; margin: 0px; padding: 2px 8px; z-index: 102; color: black; font-size: 80%; width: auto; white-space: nowrap}
#MathJax_MSIE_Frame {position: absolute; top: 0; left: 0; width: 0px; z-index: 101; border: 0px; margin: 0px; padding: 0px}
.MathJax_Error {color: #CC0000; font-style: italic}
</style><style type="text/css">.MJXp-script {font-size: .8em}
.MJXp-right {-webkit-transform-origin: right; -moz-transform-origin: right; -ms-transform-origin: right; -o-transform-origin: right; transform-origin: right}
.MJXp-bold {font-weight: bold}
.MJXp-italic {font-style: italic}
.MJXp-scr {font-family: MathJax_Script,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-frak {font-family: MathJax_Fraktur,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-sf {font-family: MathJax_SansSerif,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-cal {font-family: MathJax_Caligraphic,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-mono {font-family: MathJax_Typewriter,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-largeop {font-size: 150%}
.MJXp-largeop.MJXp-int {vertical-align: -.2em}
.MJXp-math {display: inline-block; line-height: 1.2; text-indent: 0; font-family: 'Times New Roman',Times,STIXGeneral,serif; white-space: nowrap; border-collapse: collapse}
.MJXp-display {display: block; text-align: center; margin: 1em 0}
.MJXp-math span {display: inline-block}
.MJXp-box {display: block!important; text-align: center}
.MJXp-box:after {content: " "}
.MJXp-rule {display: block!important; margin-top: .1em}
.MJXp-char {display: block!important}
.MJXp-mo {margin: 0 .15em}
.MJXp-mfrac {margin: 0 .125em; vertical-align: .25em}
.MJXp-denom {display: inline-table!important; width: 100%}
.MJXp-denom > * {display: table-row!important}
.MJXp-surd {vertical-align: top}
.MJXp-surd > * {display: block!important}
.MJXp-script-box > *  {display: table!important; height: 50%}
.MJXp-script-box > * > * {display: table-cell!important; vertical-align: top}
.MJXp-script-box > *:last-child > * {vertical-align: bottom}
.MJXp-script-box > * > * > * {display: block!important}
.MJXp-mphantom {visibility: hidden}
.MJXp-munderover {display: inline-table!important}
.MJXp-over {display: inline-block!important; text-align: center}
.MJXp-over > * {display: block!important}
.MJXp-munderover > * {display: table-row!important}
.MJXp-mtable {vertical-align: .25em; margin: 0 .125em}
.MJXp-mtable > * {display: inline-table!important; vertical-align: middle}
.MJXp-mtr {display: table-row!important}
.MJXp-mtd {display: table-cell!important; text-align: center; padding: .5em 0 0 .5em}
.MJXp-mtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-mlabeledtr {display: table-row!important}
.MJXp-mlabeledtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mlabeledtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-merror {background-color: #FFFF88; color: #CC0000; border: 1px solid #CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}
.MJXp-scale0 {-webkit-transform: scaleX(.0); -moz-transform: scaleX(.0); -ms-transform: scaleX(.0); -o-transform: scaleX(.0); transform: scaleX(.0)}
.MJXp-scale1 {-webkit-transform: scaleX(.1); -moz-transform: scaleX(.1); -ms-transform: scaleX(.1); -o-transform: scaleX(.1); transform: scaleX(.1)}
.MJXp-scale2 {-webkit-transform: scaleX(.2); -moz-transform: scaleX(.2); -ms-transform: scaleX(.2); -o-transform: scaleX(.2); transform: scaleX(.2)}
.MJXp-scale3 {-webkit-transform: scaleX(.3); -moz-transform: scaleX(.3); -ms-transform: scaleX(.3); -o-transform: scaleX(.3); transform: scaleX(.3)}
.MJXp-scale4 {-webkit-transform: scaleX(.4); -moz-transform: scaleX(.4); -ms-transform: scaleX(.4); -o-transform: scaleX(.4); transform: scaleX(.4)}
.MJXp-scale5 {-webkit-transform: scaleX(.5); -moz-transform: scaleX(.5); -ms-transform: scaleX(.5); -o-transform: scaleX(.5); transform: scaleX(.5)}
.MJXp-scale6 {-webkit-transform: scaleX(.6); -moz-transform: scaleX(.6); -ms-transform: scaleX(.6); -o-transform: scaleX(.6); transform: scaleX(.6)}
.MJXp-scale7 {-webkit-transform: scaleX(.7); -moz-transform: scaleX(.7); -ms-transform: scaleX(.7); -o-transform: scaleX(.7); transform: scaleX(.7)}
.MJXp-scale8 {-webkit-transform: scaleX(.8); -moz-transform: scaleX(.8); -ms-transform: scaleX(.8); -o-transform: scaleX(.8); transform: scaleX(.8)}
.MJXp-scale9 {-webkit-transform: scaleX(.9); -moz-transform: scaleX(.9); -ms-transform: scaleX(.9); -o-transform: scaleX(.9); transform: scaleX(.9)}
.MathJax_PHTML .noError {vertical-align: ; font-size: 90%; text-align: left; color: black; padding: 1px 3px; border: 1px solid}
</style></head><body><div style="display: none;" id="MathJax_Message"></div>
<div style="text-align: right;">Author: Romain Vergne (<a href="http://romain.vergne.free.fr/blog/">website</a>)<br>
Please cite my name and add a link to my web page if you use this course<br>
</div>

<h1 style="text-align: center;">Image synthesis and OpenGL: graphics
pipeline</h1>

Quick links to:<br>

<ol>

  <li><span style="text-decoration: underline;"><a href="#Reminder:_simplified_pipeline">Reminder: simplified pipeline</a></span></li>
  <li><span style="text-decoration: underline;"><a href="#Fixed_pipeline_OpenGL_1">Fixed pipeline (OpenGL 1)</a></span></li>
  <li><span style="text-decoration: underline;"><a href="#Dynamic_pipeline_OpenGL_2">Dynamic pipeline (OpenGL 2)</a></span></li>
  <li><span style="text-decoration: underline;"><a href="#Dynamic_pipeline_OpenGL_4">Dynamic pipeline (OpenGL 4)</a></span></li>
  <li><span style="text-decoration: underline;"><a href="#Sources">Sources</a><br>
    </span></li>

</ol>

<h2><a name="Reminder:_simplified_pipeline"></a>Reminder: simplified pipeline</h2>

<br>

<table style="text-align: left; width: 100px; margin-left: auto; margin-right: auto;" border="1" cellpadding="2" cellspacing="2">

  <tbody>
    <tr>
      <td style="vertical-align: top;"><img style="width: 557px; height: 358px;" alt="" src="SI03-graphics%20pipeline_fichiers/pipeline.jpg"><br>
      </td>
      <td style="vertical-align: top;"><img style="width: 425px; height: 358px;" alt="" src="SI03-graphics%20pipeline_fichiers/pipeline-res.jpg"><br>
      </td>
    </tr>
    <tr align="center">
      <td colspan="2" rowspan="1" style="vertical-align: top;"><a href="http://romain.vergne.free.fr/teaching/IS/imgs01/blender-scene.blend">Download this simple scene</a></td>
    </tr>
  </tbody>
</table>

<br>

<br>

<ul>

  <li><span style="font-weight: bold;">3D models</span> : triangle soup (vertices and their attributes).<br>
  </li>
  
  <li><span style="font-weight: bold;">Lights</span>: position, direction, color, intensity, etc.<br>
  </li>

  <li><span style="font-weight: bold;">Materials</span>: shininess, translucency, textures, etc.</li>
  <li><span style="font-weight: bold;">Camera</span>: position, view, up, projection type, etc.</li>
  <li><span style="font-weight: bold;">Rendering</span>: resolution, post-effects, etc.</li>

</ul>
<h3>
Rendering</h3>

<table style="text-align: left; margin-left: auto; margin-right: auto;" border="1" cellpadding="2" cellspacing="2">
  <tbody>
    <tr>
      <td style="vertical-align: top;"><img style="width: 679px; height: 195px;" alt="" src="SI03-graphics%20pipeline_fichiers/rendering01.jpg"><br>
      </td>
      <td style="vertical-align: top;"><img style="width: 478px; height: 193px;" alt="" src="SI03-graphics%20pipeline_fichiers/rendering02.jpg"><br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;">
      <div style="text-align: center;"><span style="font-weight: bold;">Ray-tracing</span><br>
      </div>
      <ul>
        <li>Propagate rays from pixels</li>
        <li>Scene = set of intersectable primitives<br>
        </li>
      </ul>
      </td>
      <td style="vertical-align: top;">
      <div style="text-align: center;"><span style="font-weight: bold;">Rasterization</span><br>
      </div>
      <ul>
<li>Project primitives on screen <br>
</li>
        <li>discretize primitives<br>
        </li>
<li>Scene = set of rasterizable primitives<br>
  </li>
      </ul>

      </td>
    </tr>
  </tbody>
</table>

<br>
<ul>
  <li>Graphic cards use rasterization!</li>
  <li>Inputs: camera (MVP matrix), scene geometry (polygons), attributes (color, material,...), lights</li>
  <li>Output: a raster image (Red,Green,Blue)</li>
</ul>
<ul>
  <li>Rendering algorithm</li>
  <ol>
    <li>clear destination buffers</li>
    <li>configure scene properties (camera, light sources, etc)</li>
    <li>load object geometry, textures and attributes&nbsp;</li>
    <li>draw objects<br>
    </li>
    <li>display the rendered image (double buffering)</li>
    <li>compute next image</li>
  </ol>
</ul>
<h3>The GPU</h3>

What is the difference between a CPU (Central Processing Unit) and a GPU (Graphics Processing Unit)? A simple demonstration <a href="https://www.youtube.com/watch?v=fKK933KK6Gg">here</a>.<br>
<ul>
  <li>Allows complex computations by the graphic card (CPU free for other calculations)</li>
  <li>Hundreds of operations in parallel</li>
  <li>Access memory via specialized buffers (Vertex Buffers, Frame Buffers, Textures - in 1D / 2D / 3D)</li>
  <li>Specialized pipeline for rendering rasterized images</li>
  <li>Controlable via a graphics API (OpenGL / DirectX)</li>
  <li>Programmable using specific programming languages (GLSL / HLSL / CG)</li>
</ul>
<h2><a name="Fixed_pipeline_OpenGL_1"></a>Fixed pipeline (OpenGL 1)</h2>
<table style="text-align: left; margin-left: auto; margin-right: auto;" border="1" cellpadding="2" cellspacing="2">
  <tbody>
    <tr align="center">
      <td colspan="3" rowspan="1" style="vertical-align: top;"><img style="width: 614px; height: 470px;" alt="" src="SI03-graphics%20pipeline_fichiers/pipeline-v1-01.png"><br>
      </td>
    </tr>
    <tr align="center">
      <td colspan="3" rowspan="1" style="vertical-align: top;"><span style="font-weight: bold;">Input geometry and attributes (via OpenGL API)</span><br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top;">
      <ul>
<li>Primitives by primitives</li>
      </ul>


      <span style="color: rgb(204, 0, 0);">glBegin(...);</span><br style="color: rgb(204, 0, 0);">


      <span style="color: rgb(204, 0, 0);">glColor3f(...); // vertex color</span><br style="color: rgb(204, 0, 0);">


      <span style="color: rgb(204, 0, 0);">glNormal3f(...); // vertex normal</span><br style="color: rgb(204, 0, 0);">


      <span style="color: rgb(204, 0, 0);">glVertex3f(...); // vertex position</span><br>


      <span style="color: rgb(204, 0, 0);">...</span><br style="color: rgb(204, 0, 0);">


      <span style="color: rgb(204, 0, 0);">glEnd();</span><br>


      <ul>
<ul><li>Bad solution (deprecated)<br>
    </li><li>transfers CPU - GPU</li></ul>
      </ul>
      </td>
      <td style="vertical-align: top;">
      <ul>
<li>better: send arrays containing geometry directly</li><ul><li>initialization<br>
    </li></ul>
      </ul>


      <span style="color: rgb(204, 0, 0);">// pointer to the array containing vertex data</span><br style="color: rgb(204, 0, 0);">


      <span style="color: rgb(204, 0, 0);">glVertexAttribPointer(...)</span><br style="color: rgb(204, 0, 0);">


      <br>


      <ul>
<ul><li>runtime<br>
    </li></ul>
      </ul>


      <span style="color: rgb(204, 0, 0);"></span><span style="color: rgb(204, 0, 0);">// enable the previously linked vertex array</span><br style="color: rgb(204, 0, 0);">


      <span style="color: rgb(204, 0, 0);">glEnableVertexAttribArray(...);</span><br style="color: rgb(204, 0, 0);">


      <br style="color: rgb(204, 0, 0);">


      <span style="color: rgb(204, 0, 0);">// send it! </span><br style="color: rgb(204, 0, 0);">


      <span style="color: rgb(204, 0, 0);">glDrawArrays(...);</span><br style="color: rgb(204, 0, 0);">


      <span style="color: rgb(204, 0, 0);">// or</span><br style="color: rgb(204, 0, 0);">


      <span style="color: rgb(204, 0, 0);">glDrawElements(...);</span><br style="color: rgb(204, 0, 0);">


      <br style="color: rgb(204, 0, 0);">


      <span style="color: rgb(204, 0, 0);">// disable array</span><br style="color: rgb(204, 0, 0);">


      <span style="color: rgb(204, 0, 0);">glDisbaleVertexAttribArray(...);</span></td>
      <td style="vertical-align: top;">
      <ul>
<li>even better: store array in the GPU memory <br>
  </li><ul><li>initialization</li></ul>
      </ul>


      <span style="color: rgb(204, 0, 0);">// create a buffer inside the GPU memory</span><br style="color: rgb(204, 0, 0);">


      <span style="color: rgb(204, 0, 0);">glGenBuffers(...);</span><br style="color: rgb(204, 0, 0);">


      <span style="color: rgb(204, 0, 0);">// make this buffer active (next operations will modify this buffer - state machine)</span><br style="color: rgb(204, 0, 0);">


      <span style="color: rgb(204, 0, 0);">glBindBuffer(...);</span><br style="color: rgb(204, 0, 0);">


      <span style="color: rgb(204, 0, 0);">// send the array of vertices and attributes inside this buffer</span><br style="color: rgb(204, 0, 0);">


      <span style="color: rgb(204, 0, 0);">glBufferData(...);</span><br style="color: rgb(204, 0, 0);">


      <span style="color: rgb(204, 0, 0);">// tell OpenGL that this buffer contains vertices (it could actually contains everything you want!)</span><br style="color: rgb(204, 0, 0);">


      <span style="color: rgb(204, 0, 0);">glVertexAttribPointer(...);</span><br>


      <ul>
<ul><li>runtime</li></ul>
      </ul>


      <span style="color: rgb(204, 0, 0);">// enable the previously linked buffer</span><br style="color: rgb(204, 0, 0);">



      <span style="color: rgb(204, 0, 0);">glEnableVertexAttribArray(...);</span><br style="color: rgb(204, 0, 0);">



      <br style="color: rgb(204, 0, 0);">



      <span style="color: rgb(204, 0, 0);">// send it! </span><br style="color: rgb(204, 0, 0);">



      <span style="color: rgb(204, 0, 0);">glDrawArrays(...);</span><br style="color: rgb(204, 0, 0);">



      <span style="color: rgb(204, 0, 0);">// or</span><br style="color: rgb(204, 0, 0);">



      <span style="color: rgb(204, 0, 0);">glDrawElements(...);</span><br style="color: rgb(204, 0, 0);">



      <br style="color: rgb(204, 0, 0);">



      <span style="color: rgb(204, 0, 0);">// disable array</span><br style="color: rgb(204, 0, 0);">



      <span style="color: rgb(204, 0, 0);">glDisbaleVertexAttribArray(...);<br>
      </span>
      <ul>
<ul><li>clearing</li></ul>
      </ul>


      <span style="color: rgb(204, 0, 0);">// clear memory in the GPU</span><br style="color: rgb(204, 0, 0);">


      <span style="color: rgb(204, 0, 0);">glDeleteBuffers(...);</span></td>
    </tr>
  </tbody>
</table>
<br>
<br>
<div style="text-align: center;"><br>
</div>
<table style="text-align: left; margin-left: auto; margin-right: auto;" border="1" cellpadding="2" cellspacing="2">
  <tbody>
    <tr>
      <td style="vertical-align: top;"><img style="width: 500px; height: 313px;" alt="" src="SI03-graphics%20pipeline_fichiers/pipeline-v1-02.png"><br>
      </td>
      <td style="vertical-align: top;">
      <div style="text-align: center;"><span style="font-weight: bold;">Vertex processing</span><br>
      <span style="font-weight: bold;"></span></div>
      <ul>
        <li>Input: one vertex (and attributes)</li>
        <li>Output: one vertex (modified)</li>
      </ul>
Vertex projection<br>
      <ul>
        <li>ModelView Matrix</li>
        <li>Projection Matrix</li>
      </ul>
Assign attributes<br>
      <ul>
        <li>Color</li>
        <li>Texture coordinates</li>
        <li>etc.<br>
        </li>
      </ul>
      <br>
      </td>
    </tr>
  </tbody>
</table>
<div style="text-align: center;"><br>
</div>

<br>

<table style="text-align: left; margin-left: auto; margin-right: auto;" border="1" cellpadding="2" cellspacing="2">

  <tbody>
    <tr>
      <td style="vertical-align: top;"><img style="width: 500px; height: 310px;" alt="" src="SI03-graphics%20pipeline_fichiers/pipeline-v1-03.png"><br>
      </td>
      <td style="vertical-align: top;">
      <div style="text-align: center;"><span style="font-weight: bold;">Primitive processing</span><br>
      <br>
      <br>
      <br>
      <span style="font-weight: bold;"></span></div>
      <ul>
        <li>Input: vertices, topology<br>
        </li>
        <li>Output: primitive<br>
        </li>
</ul>
      <ul>
<li>Vertex assembly<br>
</li><li>Perspective division</li>
        <li>Viewport transformation</li>
        <li>Clipping&nbsp;</li>
        <li>Backface culling<br>
        </li>
      </ul>
</td>
    </tr>
  </tbody>
</table>

<div style="text-align: center;"><br>
</div>

<br>

<table style="text-align: left; margin-left: auto; margin-right: auto;" border="1" cellpadding="2" cellspacing="2">

  <tbody>
    <tr>
      <td style="vertical-align: top;"><img style="width: 500px; height: 310px;" alt="" src="SI03-graphics%20pipeline_fichiers/pipeline-v1-04.png"><br>
      </td>
      <td style="vertical-align: top;">
      <div style="text-align: center;"><span style="font-weight: bold;">Rasterization</span><br>
      <br>
      <br>
      <br>
      <span style="font-weight: bold;"></span></div>
      <ul>
        <li>Input: primitive</li>
        <li>Output: fragments<br>
        </li>
</ul>
      <ul>
        <li>Fragment generation</li>
        <li>Multiple possible fragment per pixel<br>
        </li>
<li>Assign color / texture / depth / ... per fragment</li>
        <li>Interpolation along each primitive<br>
        </li>
      </ul>


      </td>
    </tr>
  </tbody>
</table>

<div style="text-align: center;"><br>
</div>

<br>

<table style="text-align: left; margin-left: auto; margin-right: auto;" border="1" cellpadding="2" cellspacing="2">

  <tbody>
    <tr>
      <td style="vertical-align: top;"><img style="width: 500px; height: 313px;" alt="" src="SI03-graphics%20pipeline_fichiers/pipeline-v1-05.png"><br>
      </td>
      <td style="vertical-align: top;">
      <div style="text-align: center;"><span style="font-weight: bold;">Fragment processing</span><br>
      <span style="font-weight: bold;"></span></div>
      <ul><li>Input: fragments</li><li>Output: pixel<br>
</li></ul>
Effects<br>
      <ul><li>Fog<br>
</li>
        <li>Textures</li>
        <li>Images</li>
</ul>Tests<br>
      <ul><li>Stencil test</li><li>Depth test<br>
</li></ul>
      <br>
      </td>
    </tr>
  </tbody>
</table>

<div style="text-align: center;"><br>
</div>

<br>
<div style="text-align: center;"><br>
</div>

<table style="text-align: left; margin-left: auto; margin-right: auto;" border="1" cellpadding="2" cellspacing="2">

  <tbody>
    <tr>
      <td style="vertical-align: top;"><img style="width: 500px; height: 313px;" alt="" src="SI03-graphics%20pipeline_fichiers/pipeline-v1-06.png"><br>
      </td>
      <td style="vertical-align: top;">
      <div style="text-align: center;"><span style="font-weight: bold;">Pixel processing</span><br>
      <br>
      <br>
      <br>
      <span style="font-weight: bold;"></span></div>
      <ul><li>Input: pixels<br>
</li><li>Output: pixels<br>
</li></ul><br>
      <ul>
        <li>Alpha test</li>
        <li>Blending<br>
        </li>
      </ul>
</td>
    </tr>
  </tbody>
</table>

<div style="text-align: center;"><br>
</div>

<h3>Fixed pipeline :</h3>
<ul>
  <li>Choose an OpenGL state</li>
  <ul>
    <li>Geometry</li>
    <li>Light <br>
    </li>
    <li>Depth test</li>
    <li>Blending</li>
    <li>Culling</li>
    <li>...</li>
  </ul>
  <li>Apply this pipeline...</li>
  <li>... and that's it! <br>
  </li>
  <li>Unable to make your own effects/lightings/etc<br>
  </li>
</ul>
<br>
<h2><a name="Dynamic_pipeline_OpenGL_2"></a>Dynamic pipeline (OpenGL 2)</h2>
<div style="text-align: center;"><br>
</div>
<table style="text-align: left; margin-left: auto; margin-right: auto;" border="1" cellpadding="2" cellspacing="2">
  <tbody>
    <tr>
      <td style="vertical-align: top;"><img style="width: 800px; height: 500px;" alt="" src="SI03-graphics%20pipeline_fichiers/pipeline-v2.png"><br>
      </td>
      <td style="vertical-align: top;"><span style="font-weight: bold;">Vertex and fragment processing now programmable!</span><br>
      <br>
      <ul>
        <li>Vertex shader</li>
        <li>Fragment shader</li>
      </ul>
      <ul>
        <li>little program executed on the GPU</li>
        <li>languages:</li>
        <ul>
          <li>GG (nvidia only)</li>
          <li>HLSL (DirectX only - Microsoft)</li>
          <li><span style="font-weight: bold;">GLSL (OpenGL Shading Language)</span></li>
        </ul>
      </ul>
      <br>
      <div style="text-align: center;"><big><big>Why is it usefull?<br>
      </big></big></div>
      </td>
    </tr>
  </tbody>
</table>
<div style="text-align: center;">


</div>
<h2 style="text-align: left;"><br>
</h2>
<h3>How does a shader look like?</h3>
<div style="text-align: center;"><br>
</div>
<table style="text-align: left; margin-left: auto; margin-right: auto;" border="1" cellpadding="2" cellspacing="2">
  <tbody>
    <tr>
      <td style="vertical-align: top;">// GLSL version<br>
      <span style="color: rgb(204, 0, 0);">#version 330</span><br>
      <br>
// Vertex attributes (given by glVertexAttribPointer(...))<br>
      <span style="color: rgb(204, 0, 0);">layout(location = 0) in vec3 vertexPosition_modelspace;</span><br style="color: rgb(204, 0, 0);">
      <span style="color: rgb(204, 0, 0);">layout(location = 1) in vec3 vertexColor;</span><br>
      <br>
// Output data: will be interpolated for each fragment<br>
      <span style="color: rgb(204, 0, 0);">out vec3 fragmentColor;</span><br>
      <br>
// ModelViewProjection matrix (constant for the whole mesh)<br>
      <span style="color: rgb(204, 0, 0);">uniform mat4 MVP;</span><br>
      <br>
      <span style="color: rgb(204, 0, 0);">void main() {&nbsp;&nbsp;&nbsp; </span><br>
&nbsp;&nbsp;&nbsp; // Output position of the vertex, in clip space : MVP * position<br>
      <span style="color: rgb(204, 0, 0);">&nbsp;&nbsp;&nbsp; gl_Position =&nbsp; MVP * vec4(vertexPosition_modelspace,1);</span><br>
      <br>
&nbsp;&nbsp;&nbsp; // The color of each vertex will be interpolated<br>
&nbsp;&nbsp;&nbsp; // to produce the color of each fragment<br>
&nbsp;&nbsp;<span style="color: rgb(204, 0, 0);">&nbsp; fragmentColor = vertexColor;</span><br style="color: rgb(204, 0, 0);">
      <span style="color: rgb(204, 0, 0);">}</span><br>
      <br>
      <br>
      </td>
      <td style="vertical-align: top;">// GLSL version<br>
      <span style="color: rgb(204, 0, 0);">#version 330</span><br>
      <br>
// Interpolated values from the vertex shaders<br>
      <span style="color: rgb(204, 0, 0);">in vec3 fragmentColor;</span><br>
      <br>
// Ouput data<br>
      <span style="color: rgb(204, 0, 0);">out vec3 color;</span><br>
      <br>
      <span style="color: rgb(204, 0, 0);">void main() {</span><br>
&nbsp;&nbsp;&nbsp; // Output color = color specified in the vertex shader, <br>
&nbsp;&nbsp;&nbsp; // interpolated between all 3 surrounding vertices<br>
&nbsp;&nbsp;&nbsp;<span style="color: rgb(204, 0, 0);"> color = fragmentColor;</span><br style="color: rgb(204, 0, 0);">
      <span style="color: rgb(204, 0, 0);">}</span><br>
      </td>
    </tr>
    <tr>
      <td style="vertical-align: top; text-align: center;"><span style="font-weight: bold;">Vertex shader</span><br>
      </td>
      <td style="vertical-align: top; text-align: center;"><span style="font-weight: bold;">Fragment shader</span><br>
      </td>
    </tr>
  </tbody>
</table>
<br>
<h3>How can we tell the GPU to use our own GLSL program?</h3>
<div style="text-align: center;"><img style="width: 461px; height: 375px;" alt="" src="SI03-graphics%20pipeline_fichiers/shader.gif"><br>
</div>
<div style="text-align: center;">Image taken <a href="http://www.lighthouse3d.com/opengl/glsl/">here</a><br>
</div>
<h2><a name="Dynamic_pipeline_OpenGL_4"></a>Dynamic pipeline (OpenGL 4)</h2>
<div style="text-align: center;"><br>
</div>
<table style="text-align: left; margin-left: auto; margin-right: auto;" border="1" cellpadding="2" cellspacing="2">
  <tbody>
    <tr>
      <td style="vertical-align: top;"><img style="width: 657px; height: 489px;" alt="" src="SI03-graphics%20pipeline_fichiers/pipeline-v4.png"><br>
      </td>
      <td style="vertical-align: top;">
      <div style="text-align: center;"><span style="font-weight: bold;">Programmable stages<br>
      <br>
      <br>
      </span></div>
      <ul>
        <li>Vertex/fragment shaders</li>
        <li>Tesselation</li>
        <ul>
          <li>Tess. Control Shader</li>
          <li>Tess. Evaluation Shader</li>
          <li>generate patches<br>
          </li>
        </ul>
        <li>Primitive</li>
        <ul>
          <li>geometry shader</li>
          <li>stream output</li>
        </ul>
        <li>Compute</li>
        <ul>
          <li>compute shader<br>
          </li>
        </ul>
      </ul>
      </td>
    </tr>
  </tbody>
</table>
<br>
<div style="text-align: center;">
Have a look to the full detailed pipeline <a href="http://openglinsights.com/pipeline.html">here</a><br>


</div>
<h2><a name="Sources"></a>Sources</h2>


<ul>

  <li><a href="http://www.labri.fr/perso/baril/teaching/TMSI/">J.
Baril, F. Berthaut, N. Mellado</a></li>
  <li><a href="http://openglinsights.com/"><span style="text-decoration: underline;">OpenGL Insights</span></a></li>
  <li><span style="text-decoration: underline;"><a href="http://www.opengl-tutorial.org/">This very good OpenGL tutorial</a><br>
    </span></li>
</ul>

<br>

<table style="text-align: left; width: 100%;" border="0" cellpadding="2" cellspacing="2">

  <tbody>
    <tr>
      <td style="vertical-align: top;"><a href="http://romain.vergne.free.fr/teaching/IS/TP02.html">PREVIOUS:
EXERCICE02</a><br>
      </td>
      <td style="vertical-align: top; text-align: right;"><a href="http://romain.vergne.free.fr/teaching/IS/TP03.html">NEXT: EXERCICE03</a><br>
      </td>
    </tr>
  </tbody>
</table>

<br>

<br>

</body></html>