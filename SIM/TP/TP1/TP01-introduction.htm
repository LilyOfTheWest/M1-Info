<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html><head>


  
  <meta content="text/html; charset=windows-1252" http-equiv="content-type"><title>TP01-introduction</title>
  

  
  
  <script type="text/javascript" src="TP01-introduction_fichiers/MathJax.js">
  </script><style type="text/css">.MathJax_Hover_Frame {border-radius: .25em; -webkit-border-radius: .25em; -moz-border-radius: .25em; -khtml-border-radius: .25em; box-shadow: 0px 0px 15px #83A; -webkit-box-shadow: 0px 0px 15px #83A; -moz-box-shadow: 0px 0px 15px #83A; -khtml-box-shadow: 0px 0px 15px #83A; border: 1px solid #A6D ! important; display: inline-block; position: absolute}
.MathJax_Menu_Button .MathJax_Hover_Arrow {position: absolute; cursor: pointer; display: inline-block; border: 2px solid #AAA; border-radius: 4px; -webkit-border-radius: 4px; -moz-border-radius: 4px; -khtml-border-radius: 4px; font-family: 'Courier New',Courier; font-size: 9px; color: #F0F0F0}
.MathJax_Menu_Button .MathJax_Hover_Arrow span {display: block; background-color: #AAA; border: 1px solid; border-radius: 3px; line-height: 0; padding: 4px}
.MathJax_Hover_Arrow:hover {color: white!important; border: 2px solid #CCC!important}
.MathJax_Hover_Arrow:hover span {background-color: #CCC!important}
</style><style type="text/css">#MathJax_About {position: fixed; left: 50%; width: auto; text-align: center; border: 3px outset; padding: 1em 2em; background-color: #DDDDDD; color: black; cursor: default; font-family: message-box; font-size: 120%; font-style: normal; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; border-radius: 15px; -webkit-border-radius: 15px; -moz-border-radius: 15px; -khtml-border-radius: 15px; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_About.MathJax_MousePost {outline: none}
.MathJax_Menu {position: absolute; background-color: white; color: black; width: auto; padding: 2px; border: 1px solid #CCCCCC; margin: 0; cursor: default; font: menu; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; z-index: 201; box-shadow: 0px 10px 20px #808080; -webkit-box-shadow: 0px 10px 20px #808080; -moz-box-shadow: 0px 10px 20px #808080; -khtml-box-shadow: 0px 10px 20px #808080; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
.MathJax_MenuItem {padding: 2px 2em; background: transparent}
.MathJax_MenuArrow {position: absolute; right: .5em; padding-top: .25em; color: #666666; font-size: .75em}
.MathJax_MenuActive .MathJax_MenuArrow {color: white}
.MathJax_MenuArrow.RTL {left: .5em; right: auto}
.MathJax_MenuCheck {position: absolute; left: .7em}
.MathJax_MenuCheck.RTL {right: .7em; left: auto}
.MathJax_MenuRadioCheck {position: absolute; left: 1em}
.MathJax_MenuRadioCheck.RTL {right: 1em; left: auto}
.MathJax_MenuLabel {padding: 2px 2em 4px 1.33em; font-style: italic}
.MathJax_MenuRule {border-top: 1px solid #CCCCCC; margin: 4px 1px 0px}
.MathJax_MenuDisabled {color: GrayText}
.MathJax_MenuActive {background-color: Highlight; color: HighlightText}
.MathJax_MenuDisabled:focus, .MathJax_MenuLabel:focus {background-color: #E8E8E8}
.MathJax_ContextMenu:focus {outline: none}
.MathJax_ContextMenu .MathJax_MenuItem:focus {outline: none}
#MathJax_AboutClose {top: .2em; right: .2em}
.MathJax_Menu .MathJax_MenuClose {top: -10px; left: -10px}
.MathJax_MenuClose {position: absolute; cursor: pointer; display: inline-block; border: 2px solid #AAA; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-radius: 18px; -khtml-border-radius: 18px; font-family: 'Courier New',Courier; font-size: 24px; color: #F0F0F0}
.MathJax_MenuClose span {display: block; background-color: #AAA; border: 1.5px solid; border-radius: 18px; -webkit-border-radius: 18px; -moz-border-radius: 18px; -khtml-border-radius: 18px; line-height: 0; padding: 8px 0 6px}
.MathJax_MenuClose:hover {color: white!important; border: 2px solid #CCC!important}
.MathJax_MenuClose:hover span {background-color: #CCC!important}
.MathJax_MenuClose:hover:focus {outline: none}
</style><style type="text/css">.MathJax_Preview .MJXf-math {color: inherit!important}
</style><style type="text/css">.MJX_Assistive_MathML {position: absolute!important; top: 0; left: 0; clip: rect(1px, 1px, 1px, 1px); padding: 1px 0 0 0!important; border: 0!important; height: 1px!important; width: 1px!important; overflow: hidden!important; display: block!important}
.MJX_Assistive_MathML.MJX_Assistive_MathML_Block {width: 100%!important}
</style><style type="text/css">#MathJax_Zoom {position: absolute; background-color: #F0F0F0; overflow: auto; display: block; z-index: 301; padding: .5em; border: 1px solid black; margin: 0; font-weight: normal; font-style: normal; text-align: left; text-indent: 0; text-transform: none; line-height: normal; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; -webkit-box-sizing: content-box; -moz-box-sizing: content-box; box-sizing: content-box; box-shadow: 5px 5px 15px #AAAAAA; -webkit-box-shadow: 5px 5px 15px #AAAAAA; -moz-box-shadow: 5px 5px 15px #AAAAAA; -khtml-box-shadow: 5px 5px 15px #AAAAAA; filter: progid:DXImageTransform.Microsoft.dropshadow(OffX=2, OffY=2, Color='gray', Positive='true')}
#MathJax_ZoomOverlay {position: absolute; left: 0; top: 0; z-index: 300; display: inline-block; width: 100%; height: 100%; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
#MathJax_ZoomFrame {position: relative; display: inline-block; height: 0; width: 0}
#MathJax_ZoomEventTrap {position: absolute; left: 0; top: 0; z-index: 302; display: inline-block; border: 0; padding: 0; margin: 0; background-color: white; opacity: 0; filter: alpha(opacity=0)}
</style><style type="text/css">.MathJax_Preview {color: #888}
#MathJax_Message {position: fixed; left: 1px; bottom: 2px; background-color: #E6E6E6; border: 1px solid #959595; margin: 0px; padding: 2px 8px; z-index: 102; color: black; font-size: 80%; width: auto; white-space: nowrap}
#MathJax_MSIE_Frame {position: absolute; top: 0; left: 0; width: 0px; z-index: 101; border: 0px; margin: 0px; padding: 0px}
.MathJax_Error {color: #CC0000; font-style: italic}
</style><style type="text/css">.MJXp-script {font-size: .8em}
.MJXp-right {-webkit-transform-origin: right; -moz-transform-origin: right; -ms-transform-origin: right; -o-transform-origin: right; transform-origin: right}
.MJXp-bold {font-weight: bold}
.MJXp-italic {font-style: italic}
.MJXp-scr {font-family: MathJax_Script,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-frak {font-family: MathJax_Fraktur,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-sf {font-family: MathJax_SansSerif,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-cal {font-family: MathJax_Caligraphic,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-mono {font-family: MathJax_Typewriter,'Times New Roman',Times,STIXGeneral,serif}
.MJXp-largeop {font-size: 150%}
.MJXp-largeop.MJXp-int {vertical-align: -.2em}
.MJXp-math {display: inline-block; line-height: 1.2; text-indent: 0; font-family: 'Times New Roman',Times,STIXGeneral,serif; white-space: nowrap; border-collapse: collapse}
.MJXp-display {display: block; text-align: center; margin: 1em 0}
.MJXp-math span {display: inline-block}
.MJXp-box {display: block!important; text-align: center}
.MJXp-box:after {content: " "}
.MJXp-rule {display: block!important; margin-top: .1em}
.MJXp-char {display: block!important}
.MJXp-mo {margin: 0 .15em}
.MJXp-mfrac {margin: 0 .125em; vertical-align: .25em}
.MJXp-denom {display: inline-table!important; width: 100%}
.MJXp-denom > * {display: table-row!important}
.MJXp-surd {vertical-align: top}
.MJXp-surd > * {display: block!important}
.MJXp-script-box > *  {display: table!important; height: 50%}
.MJXp-script-box > * > * {display: table-cell!important; vertical-align: top}
.MJXp-script-box > *:last-child > * {vertical-align: bottom}
.MJXp-script-box > * > * > * {display: block!important}
.MJXp-mphantom {visibility: hidden}
.MJXp-munderover {display: inline-table!important}
.MJXp-over {display: inline-block!important; text-align: center}
.MJXp-over > * {display: block!important}
.MJXp-munderover > * {display: table-row!important}
.MJXp-mtable {vertical-align: .25em; margin: 0 .125em}
.MJXp-mtable > * {display: inline-table!important; vertical-align: middle}
.MJXp-mtr {display: table-row!important}
.MJXp-mtd {display: table-cell!important; text-align: center; padding: .5em 0 0 .5em}
.MJXp-mtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-mlabeledtr {display: table-row!important}
.MJXp-mlabeledtr > .MJXp-mtd:first-child {padding-left: 0}
.MJXp-mlabeledtr:first-child > .MJXp-mtd {padding-top: 0}
.MJXp-merror {background-color: #FFFF88; color: #CC0000; border: 1px solid #CC0000; padding: 1px 3px; font-style: normal; font-size: 90%}
.MJXp-scale0 {-webkit-transform: scaleX(.0); -moz-transform: scaleX(.0); -ms-transform: scaleX(.0); -o-transform: scaleX(.0); transform: scaleX(.0)}
.MJXp-scale1 {-webkit-transform: scaleX(.1); -moz-transform: scaleX(.1); -ms-transform: scaleX(.1); -o-transform: scaleX(.1); transform: scaleX(.1)}
.MJXp-scale2 {-webkit-transform: scaleX(.2); -moz-transform: scaleX(.2); -ms-transform: scaleX(.2); -o-transform: scaleX(.2); transform: scaleX(.2)}
.MJXp-scale3 {-webkit-transform: scaleX(.3); -moz-transform: scaleX(.3); -ms-transform: scaleX(.3); -o-transform: scaleX(.3); transform: scaleX(.3)}
.MJXp-scale4 {-webkit-transform: scaleX(.4); -moz-transform: scaleX(.4); -ms-transform: scaleX(.4); -o-transform: scaleX(.4); transform: scaleX(.4)}
.MJXp-scale5 {-webkit-transform: scaleX(.5); -moz-transform: scaleX(.5); -ms-transform: scaleX(.5); -o-transform: scaleX(.5); transform: scaleX(.5)}
.MJXp-scale6 {-webkit-transform: scaleX(.6); -moz-transform: scaleX(.6); -ms-transform: scaleX(.6); -o-transform: scaleX(.6); transform: scaleX(.6)}
.MJXp-scale7 {-webkit-transform: scaleX(.7); -moz-transform: scaleX(.7); -ms-transform: scaleX(.7); -o-transform: scaleX(.7); transform: scaleX(.7)}
.MJXp-scale8 {-webkit-transform: scaleX(.8); -moz-transform: scaleX(.8); -ms-transform: scaleX(.8); -o-transform: scaleX(.8); transform: scaleX(.8)}
.MJXp-scale9 {-webkit-transform: scaleX(.9); -moz-transform: scaleX(.9); -ms-transform: scaleX(.9); -o-transform: scaleX(.9); transform: scaleX(.9)}
.MathJax_PHTML .noError {vertical-align: ; font-size: 90%; text-align: left; color: black; padding: 1px 3px; border: 1px solid}
</style></head><body><div style="display: none;" id="MathJax_Message"></div>
<div style="text-align: right;">Author: Romain Vergne (<a href="http://romain.vergne.free.fr/blog/">website</a>)<br>
Please cite my name and add a link to my web page if you use this course<br>
</div>

<h1 style="text-align: center;">Image synthesis and OpenGL: exercices 01</h1>

<h2>Setup</h2>

We will use Linux and the following libraries:<br>


<ul>
<li><a href="http://www.opengl.org/">OpenGL</a>: Open Graphics
Library
(<a href="http://www.opengl.org/sdk/docs/man/">online spec</a>, <a href="http://www.opengl.org/registry/">pdf spec</a>)</li><li><a href="http://www.opengl.org/resources/libraries/">GLU</a>:
OpenGL Utility Library<br>
  </li><li><a href="http://glew.sourceforge.net/">GLEW</a>: OpenGL Extension
Wrangler Library<br>
  </li><li><a href="http://glm.g-truc.net/">GLM</a>: OpenGL Mathematics
library</li><li><a href="http://qt.digia.com/">QT</a>: the window manager<br>
  </li>
</ul>


<br>


Installing sources. In a terminal, do:<br>


<ol>
<li>Download/extract external libraries and sources</li>
  <ol>
    <li>wget http://romain.vergne.free.fr/teaching/IS/data01/TP01.tgz</li>
    <li>wget http://romain.vergne.free.fr/teaching/IS/data01/ext.tgz</li>
    <li>tar xvzf TP01.tgz &amp;&amp; tar xvzf ext.tgz&nbsp;</li>
  </ol>
  <li>If glew is not installed on your machine, go to ext/glew-1.9.0 and compile (make)<br>
  </li>
<li>If needed, edit the file main.pro to ensure that paths are correct and link to the glew and glm libs<br>
</li>
  <li>To compile: qmake &amp;&amp; make<br>
  </li>
<li>To run: ./tp01</li><li>To edit: use either your prefered text editor or qtcreator</li>
</ol>
<h2>First OpenGL program: a simple animated screensaver</h2>

The goal of these exercices is to familiarize yourself with OpenGL
windows and primitives. You should obtain something like this:<br>

<div style="text-align: center;"><img style="width: 411px; height: 308px;" alt="" src="TP01-introduction_fichiers/tp01.jpg"><br>
</div>

<br>

<br>

<h3>Exercice 1: Hello World<br>
</h3>

Open the source file <span style="font-style: italic;">viewer.h/.cpp</span>
and observe/understand the structure of the source files:<br>

<ul>

  <li>The viewer is a QGLWidget (from Qt) that conveniently produces an OpenGL context when created.</li>
  <ul>
    <li>Check the documentation associated with QGLWidget</li>
    <li>When are the functions <span style="font-style: italic;">initializeGL</span>, <span style="font-style: italic;">paintGL</span> and <span style="font-style: italic;">resizeGL</span> called?<br>
    </li>
  </ul>

  
  <li>What are the role of the functions <span style="font-style: italic;">glClearColor</span> (<span style="font-style: italic;">initialize</span>) and <span style="font-style: italic;">glClear</span> (<span style="font-style: italic;">display</span>)? (check the OpenGL
documentation)</li>
  <li>Change the color of the background to blue<br>
  </li>
</ul>

<h3>Exercice 2: OpenGL primitives (OpenGL version &lt; 4)<br>
</h3>

<table style="text-align: left; margin-left: auto; margin-right: auto;" border="1" cellpadding="2" cellspacing="2">

  <tbody>
    <tr>
      <td style="vertical-align: top;"><br>
Basic primitives (points, lines, triangles quads and polygons) in
OpenGL can be drawn using the following algorithm:<br>
      <br>
      <span style="color: rgb(204, 0, 0);">glBegin(mode);</span><br style="color: rgb(204, 0, 0);">
      <span style="color: rgb(204, 0, 0);">glColor3f(float,float,float);
// set the current color </span><br style="color: rgb(204, 0, 0);">
      <span style="color: rgb(204, 0, 0);">glVertex3f(float,float,float);
// draw a vertex</span><br style="color: rgb(204, 0, 0);">
      <span style="color: rgb(204, 0, 0);">
glVertex3f(float,float,float); // draw another vertex</span><br style="color: rgb(204, 0, 0);">
      <span style="color: rgb(204, 0, 0);">...</span><br style="color: rgb(204, 0, 0);">
      <span style="color: rgb(204, 0, 0);">glEnd();</span><br>
      <br>
where mode is one of the available OpenGL scheme: <br>
(image taken <a href="http://taskercode.wordpress.com/">here</a>)<br>
      </td>
      <td style="vertical-align: top;">
      <div style="text-align: center;"><img style="width: 400px; height: 286px;" alt="" src="TP01-introduction_fichiers/primitives.jpg"><br>
      </div>
      </td>
    </tr>
  </tbody>
</table>

<br>

By default, widget coordinates are in the range [-1,1] in the X and Y
directions. <br>

<ul>

  <li>Use the GL_TRIANGLES mode, <span style="font-style: italic;">glVertex3f</span>
and <span style="font-style: italic;">glColor3f</span> to obtain a
result similar to:<br>
  </li>
</ul>

<div style="text-align: center;"><img style="width: 394px; height: 246px;" alt="" src="TP01-introduction_fichiers/triangles.jpg"><br>
</div>

<ul>

  <li>What happens if we change the color on each vertex of a triangle?
    <br>
  </li>
  <li>Choose some colors at each vertex so that the interpolation is
smooth everywhere</li>
  <li>Try to obtain exactly the same result using the GL_TRIANGLE_STRIP
mode</li>
  <li>What are the advantages of TRIANGLE_STRIP compared to
GL_TRIANGLES?</li>
</ul>

<h3>Exercice 3: generating random points</h3>We now would like to distribute and draw some points in the viewer, with randomized positions, colors and sizes. <br>
To that end, we first need to create these points and store them in an array. <br>
<br>
The Point structure is defined in viewer.h. <br>
<ul>
  <li>In the function generateRandomPoints, generate some points and store them in the data structure _points (an array of Point). <br>
  </li>
  <ul>
    <li>each point added in this array should have random properties
(color, position, direction and size) - you should use the random
functions provided in viewer.h</li>
    <li>a point direction defines the direction and speed in which the
point is moving (vectors should be small enough - no more than 0.1
length)<br>
    </li>
  </ul>
</ul>


<ul>

  <li>Once, the points have been defined, use the GL_POINTS mode in paintGL to draw the points with their respective
color and size at their given positions.&nbsp;</li>
  <ul>
    <li>Note 1: the size of a point can be modified using the function<span style="font-style: italic;"> glPointSize(float)</span></li>
    <li>Note 2<span style="font-style: italic;">: glPointSize</span>
must be outside <span style="font-style: italic;">glBegin(...)/glEnd()</span></li>
  </ul>
  <li>How do the points look like?</li>
  <li>Add the following function in <span style="font-style: italic;">initialize</span>GL:&nbsp;</li>
  <ul>
    <li><span style="font-style: italic;">glEnable(GL_POINT_SMOOTH);</span></li>
    <li>What do you conclude?<span style="font-style: italic;"></span></li>
  </ul>
</ul>

<h3>Exercice 4: animating points</h3>

We would like the points to move in their respective direction, and
making sure that they bounce off the walls of the window. <br>

At each time step, the position of a point should be updated this way: <br>

<span style="font-style: italic;"><br>
<span style="color: rgb(204, 0, 0); font-style: italic;">if </span></span><span style="color: rgb(204, 0, 0); font-style: italic;">point is outside a
wall then</span><br style="color: rgb(204, 0, 0); font-style: italic;">

<span style="color: rgb(204, 0, 0); font-style: italic;">&nbsp;&nbsp;&nbsp;
point.dir = reflected vector between point.dir and wall.normal</span><br style="color: rgb(204, 0, 0); font-style: italic;">

<span style="color: rgb(204, 0, 0); font-style: italic;">endif</span><br style="color: rgb(204, 0, 0); font-style: italic;">

<span style="color: rgb(204, 0, 0); font-style: italic;">point.pos =
point.pos + point.dir</span><br>

<br>

<div style="text-align: center;"><img style="width: 447px; height: 198px;" alt="" src="TP01-introduction_fichiers/reflec.jpg"><br>
</div>

<br>

<ul>

  <li>Complete the function <span style="font-style: italic;">updatePointPositions(std::vector&lt;Point&gt;
&amp;points)</span> and add its call in the rendering function to
animate points</li>
  <ul>
    <li>Note 1: testing if a point is outside a wall can be done by
comparing point and wall coordinates.</li>
    <li>Example for the image above: <span style="font-style: italic; color: rgb(204, 0, 0);">if pos.y&lt;=-1
then update direction with the normal (0,1)</span></li>
    <li>Note 2: the reflected vector can be computed using the function
      <span style="font-style: italic;">glm::reflect(dir,normal)</span></li>
  </ul>
</ul>

<h3>Exercice 5: viewport</h3>

<ul>

  <li>Try to resize the window. What do you observe?</li>
  <li>Read the manual page of the function <span style="font-style: italic;">glViewport</span></li>
  <li>Fill the function <span style="font-style: italic;">resize</span>
to resolve the problem<span style="font-style: italic;"><br>
    </span></li>
</ul>

<br>
<br>

<table style="text-align: left; width: 1359px; height: 32px;" border="0" cellpadding="2" cellspacing="2">

  <tbody>
    <tr>
      <td style="vertical-align: top;"><a href="http://romain.vergne.free.fr/teaching/IS/SI01-introduction.html">PREVIOUS: 01 - INRODUCTION</a><br>
      </td>
      <td style="vertical-align: top; text-align: right;"><a href="http://romain.vergne.free.fr/teaching/IS/SI02-transformations.html">NEXT: 02 - TRANSFORMATIONS</a><br>
      </td>
    </tr>
  </tbody>
</table>

<br>


<br>

<br>
</body></html>